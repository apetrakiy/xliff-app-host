{"version":3,"sources":["components/ConfigScreen.tsx","components/EntryEditor.tsx","components/Page.tsx","components/Sidebar.tsx","components/Field.tsx","styles.ts","import/ImportVisitor.ts","consts.ts","import/XliffImporter.ts","services/ContentfulService.ts","components/import/FileDropZone.tsx","components/import/FileImport.tsx","export/ExportVisitor.ts","export/XliffExporter.ts","components/export/FileExport.tsx","utils.ts","components/Dialog.tsx","index.tsx"],"names":["Config","props","onConfigure","a","sdk","app","getCurrentState","currentState","parameters","state","targetState","this","getParameters","setState","setReady","className","css","margin","Component","Entry","Page","Sidebar","locales","useEffect","window","startAutoResizer","stopAutoResizer","type","onClick","entryTitle","entry","fields","contentType","displayField","getValue","default","dialogs","openCurrentApp","allowHeightOverflow","position","shouldCloseOnOverlayClick","shouldCloseOnEscapePress","title","entryId","getSys","id","contentTypeId","sys","width","minHeight","exportToXliff","Field","styles","modalContainer","height","modalContent","headerUnderline","borderBottom","dropZone","fileItem","dropped","color","inProgress","success","error","abort","parseHtml","require","ImportVisitor","contentful","parseArrayField","value","split","context","Error","localization","console","info","field","fieldContentType","metadata","find","x","warn","localized","disabled","fieldValue","target","fieldType","e","updateEntry","targetLocale","xliff2js","XliffImporter","fileContent","accept","visitor","parseXliffContent","json","getEntries","entries","sourceLocale","sourceLanguage","targetLanguage","visitEntryLocalization","result","Object","resources","resourceId","resourceValue","parseResourceId","spaceId","undefined","items","map","fieldId","source","getEntry","push","parts","length","ContentfulService","_space","_locales","entryMetadatas","space","ctEntry","entryFields","ct","publish","keys","publishEntry","getContentTypes","contentTypes","isLinkField","availableFields","filter","f","meta","linkFields","linkType","isEntryLinkField","localizableFields","log","code","name","names","available","initializeEntryMetadatas","_instance","FileItemStatus","FileDropzone","fileItemStyles","fileStatusClasses","Map","Dropped","InProgress","Success","Abort","defIconProps","style","verticalAlign","size","icon","fileStatusIcon","onDrop","files","fileItems","file","status","getRootProps","getInputProps","item","get","FileImport","useState","setFiles","isBusy","setIsBusy","isFirstDrop","setFileStatus","fileIndex","prevState","newState","onImportClick","newFiles","forEach","onFilesProcessed","alertProps","confirmLabel","message","every","dialogsApi","openAlert","filesProcessed","onFileLoad","reader","index","content","importer","getInstance","execute","fileReader","FileReader","onload","onerror","onFileError","onabort","readAsText","columns","columnGap","rowGap","acceptedFiles","loading","buttonType","ExportVisitor","_xliff","getFieldValue","locale","isRichDocument","documentToHtmlString","isStringArray","join","unit","fileId","js2xliff","XliffExporter","includeLinkedEntries","_rootEntry","getRoot","root","getAllEntries","entriesToExport","visitEntry","xliff","blob","Blob","fileName","saveAs","rootEntry","stack","rootEntryTypeId","pushEntry","entryTypeId","findIndex","linkMeta","src","dest","links","link","linkEntry","shift","FileExport","getDefaultLocale","targetLocales","getLocales","loc","defaultValue","key","stickyValue","localStorage","getItem","JSON","parse","setValue","setItem","stringify","useStickyState","targetLocaleCode","onButtonClick","isSuccess","exporter","htmlFor","required","isDisabled","onChange","event","currentTarget","labelText","checked","data-test-id","Dialog","params","invocation","isLoading","setIsLoading","initialize","init","Content","document","getElementById","location","locations","LOCATION_APP_CONFIG","component","LOCATION_ENTRY_FIELD","LOCATION_ENTRY_EDITOR","EntryEditor","LOCATION_DIALOG","LOCATION_ENTRY_SIDEBAR","LOCATION_PAGE","componentLocationSetting","is","render"],"mappings":"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","file":"static/js/main.6c9a1269.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AppExtensionSDK } from '@contentful/app-sdk';\nimport { Heading, Form, Workbench, Paragraph } from '@contentful/forma-36-react-components';\nimport { css } from 'emotion';\n\nexport interface AppInstallationParameters {}\n\ninterface ConfigProps {\n  sdk: AppExtensionSDK;\n}\n\ninterface ConfigState {\n  parameters: AppInstallationParameters;\n}\n\nexport default class Config extends Component<ConfigProps, ConfigState> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = { parameters: {} };\n\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    props.sdk.app.onConfigure(() => this.onConfigure());\n  }\n\n  async componentDidMount() {\n    // Get current parameters of the app.\n    // If the app is not installed yet, `parameters` will be `null`.\n    const parameters: AppInstallationParameters | null = await this.props.sdk.app.getParameters();\n\n    this.setState(parameters ? { parameters } : this.state, () => {\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      this.props.sdk.app.setReady();\n    });\n  }\n\n  onConfigure = async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await this.props.sdk.app.getCurrentState();\n\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: this.state.parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState,\n    };\n  };\n\n  render() {\n    return (\n      <Workbench className={css({ margin: '80px' })}>\n        <Form>\n          <Heading>App Config</Heading>\n          <Paragraph>Welcome to your contentful app. This is your config page.</Paragraph>\n        </Form>\n      </Workbench>\n    );\n  }\n}\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { EditorExtensionSDK } from '@contentful/app-sdk';\n\ninterface EditorProps {\n  sdk: EditorExtensionSDK;\n}\n\nconst Entry = (props: EditorProps) => {\n  return <Paragraph>Hello Entry Editor Component</Paragraph>;\n};\n\nexport default Entry;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { PageExtensionSDK } from '@contentful/app-sdk';\n\ninterface PageProps {\n  sdk: PageExtensionSDK;\n}\n\nconst Page = (props: PageProps) => {\n  return <Paragraph>Hello Page Component</Paragraph>;\n};\n\nexport default Page;\n","import React, { useEffect } from 'react';\nimport { Button } from '@contentful/forma-36-react-components';\nimport { SidebarExtensionSDK } from '@contentful/app-sdk';\n\ninterface SidebarProps {\n  sdk: SidebarExtensionSDK;\n}\n\nconst Sidebar = (props: SidebarProps) => {\n  const { sdk } = props;\n  //const [contentTypes] = Promise.all(sdk.space.getContentTypes())\n  const { locales } = sdk;\n  //const contentTypes = (props.sdk.space.getContentTypes()).map(x => x.items)\n\n  useEffect(() => {\n    sdk.window.startAutoResizer();\n    return () => {\n      sdk.window.stopAutoResizer();\n    };\n  }, [sdk.window]);\n\n  const exportToXliff = () => {\n    const entryTitle = sdk.entry.fields[sdk.contentType.displayField].getValue(locales.default);\n    const title = `XLIFF import/export`\n\n    sdk.dialogs.openCurrentApp({\n      allowHeightOverflow: true,\n      position: \"center\",\n      shouldCloseOnOverlayClick: true,\n      shouldCloseOnEscapePress: true,\n      title,\n      parameters: {\n        //...sdk.parameters.installation,\n        entryId: sdk.entry.getSys().id,\n        entryTitle,\n        contentTypeId: sdk.contentType.sys.id\n      },\n      width: \"large\",\n      minHeight: 500,\n    })\n  }\n\n  return (<>\n    <Button type=\"button\" onClick={() => exportToXliff()}>XLIFF import/export</Button>\n  </>)\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { FieldExtensionSDK } from '@contentful/app-sdk';\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK;\n}\n\nconst Field = (props: FieldProps) => {\n  // If you only want to extend Contentful's default editing experience\n  // reuse Contentful's editor components\n  // -> https://www.contentful.com/developers/docs/extensibility/field-editors/\n  return <Paragraph>Hello Entry Field Component</Paragraph>;\n};\n\nexport default Field;\n","import { css } from 'emotion';\r\n\r\nexport const styles = {\r\n    modalContainer: css({\r\n        height: '360px',\r\n    }),\r\n    modalContent: css({\r\n        //display: 'flex'\r\n    }),\r\n    headerUnderline: css({\r\n        borderBottom: '1px solid rgb(195, 207, 213)',\r\n    }),\r\n    dropZone: {\r\n        fileItem: {\r\n            dropped: css({\r\n                color: 'var(--color-text-base)',\r\n            }),\r\n            inProgress: css({\r\n                color: 'var(--color-text-base)',\r\n            }),\r\n            success: css({\r\n                color: 'var(--color-text-base)',\r\n            }),\r\n            error: css({\r\n                color: 'var(--color-negative)',\r\n            }),\r\n            abort: css({\r\n                color: 'var(--color-negative)',\r\n            })\r\n        },\r\n    },\r\n};\r\n","import { defaultSeperator } from '../consts';\r\nimport { ContentfulAPI } from '../services/ContentfulService';\r\nimport { EntryLocalization, Indexable, TranslationEntry, VisitableContext, Visitor } from '../interfaces';\r\nconst { parseHtml } = require('contentful-html-rich-text-converter');\r\n\r\nexport {};\r\nexport class ImportVisitor implements Visitor {\r\n    contentful: ContentfulAPI;\r\n    visitEntry(context: VisitableContext, entry: TranslationEntry): Promise<void> {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n\r\n    constructor(contentful: ContentfulAPI) {\r\n        this.contentful = contentful;\r\n    }\r\n    \r\n    async visitEntryLocalization(context: VisitableContext, localization: EntryLocalization): Promise<void> {\r\n        let fields: Indexable<string> = {};\r\n\r\n        console.info(`Visit entry '${localization.entry.id} ...`);\r\n\r\n        for (const field of localization.fields) {\r\n            const fieldContentType = localization.entry.metadata.contentType.fields.find((x) => x.id === field.id);\r\n\r\n            if (!fieldContentType) {\r\n                console.warn(`Unable to find content type for field '${field.id}'`);\r\n                continue;\r\n            }\r\n\r\n            if (!fieldContentType.localized || fieldContentType.disabled) {\r\n                console.warn(\r\n                    `Field '${field.id}' for content type '${fieldContentType.type}' is marked as non-localizable or disabled - skip`\r\n                );\r\n                continue;\r\n            }\r\n\r\n            let fieldValue: any = field.target;\r\n\r\n            try {\r\n                const fieldType = fieldContentType.type;\r\n                if (fieldType === 'Array') {\r\n                    fieldValue = this.parseArrayField(field.target);\r\n                } else if (fieldType === 'RichText') {\r\n                    fieldValue = parseHtml(field.target);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error on parsing value ', fieldValue);\r\n                throw error;\r\n            }\r\n\r\n            fields[field.id] = fieldValue;\r\n        }\r\n\r\n        await this.contentful.updateEntry(localization.entry.id, context.targetLocale, fields);\r\n    }\r\n\r\n    parseArrayField = (value: string) => value?.split(defaultSeperator);\r\n}\r\n","export const defaultSeperator = ','; //\"@#@\"","import { ImportVisitor } from '../import/ImportVisitor';\r\nimport { ContentfulAPI } from '../services/ContentfulService';\r\nimport { EntryLocalization, FieldLocalization, Visitable, VisitableContext, Visitor } from '../interfaces';\r\n\r\nconst xliff2js = require('xliff/cjs/xliff2js');\r\nexport {};\r\n\r\nexport class XliffImporter implements Visitable {\r\n    private fileContent: string;\r\n    private contentful: ContentfulAPI;\r\n\r\n    constructor(contentful: ContentfulAPI, fileContent: string) {\r\n        this.fileContent = fileContent;\r\n        this.contentful = contentful;\r\n    }\r\n\r\n    async execute() {\r\n        await this.accept(new ImportVisitor(this.contentful));\r\n    }\r\n\r\n    async accept(visitor: Visitor): Promise<void> {\r\n        const json = await this.parseXliffContent(this.fileContent);\r\n        const entries = await this.getEntries(json);\r\n        const context: VisitableContext = { sourceLocale: json.sourceLanguage, targetLocale: json.targetLanguage };\r\n        for (const localization of entries) {\r\n            try {\r\n                await visitor.visitEntryLocalization(context, localization);\r\n            } catch (error) {\r\n                console.error(`Error on visit entry ${localization.entry.id}`, error);\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    async getEntries(json: any): Promise<EntryLocalization[]> {\r\n        let result: EntryLocalization[] = [];\r\n\r\n        for (let [resourceId, resourceValue] of Object.entries(json.resources)) {\r\n            const { spaceId, entryId } = this.parseResourceId(resourceId);\r\n            if (spaceId === undefined || entryId === undefined) {\r\n                console.error('Wrong resource id format ', resourceId);\r\n                continue;\r\n            }\r\n\r\n            const items = Object.entries(resourceValue as ArrayLike<any>);\r\n            const fields = items.map((x) => {\r\n                const [fieldId, localization]: [fieldId: string, localization: any] = x;\r\n                const fieldLocalization: FieldLocalization = {\r\n                    id: fieldId,\r\n                    source: localization.source,\r\n                    target: localization.target,\r\n                };\r\n                return fieldLocalization;\r\n            });\r\n\r\n            const entry = await this.contentful.getEntry(entryId);\r\n            result.push({ entry, fields });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private async parseXliffContent(fileContent: string) {\r\n        return await xliff2js(fileContent);\r\n    }\r\n\r\n    protected parseResourceId(id: string): { spaceId: string; entryId: string } {\r\n        const parts = id?.split(':') ?? [];\r\n        const [spaceId, entryId] = parts.length === 2 ? parts : [];\r\n        return { spaceId, entryId };\r\n    }\r\n}\r\n","import { SpaceAPI, ContentType, ContentTypeField, LocalesAPI } from '@contentful/app-sdk';\r\nimport { Indexable, LocaleInfo, TranslationEntry, TranslationEntryMetadata } from '../interfaces';\r\n\r\nexport interface ContentfulAPI {\r\n    getLocales(): LocaleInfo[];\r\n    getDefaultLocale(): LocaleInfo;\r\n\r\n    getEntry(entryId: string): Promise<TranslationEntry>;\r\n    updateEntry(entryId: string, targetLocale: string, fields: Indexable<string>, publish?: boolean): Promise<void>;\r\n}\r\n\r\nexport class ContentfulService implements ContentfulAPI {\r\n    private static _instance: ContentfulService;\r\n\r\n    protected _space: SpaceAPI | undefined;\r\n    private _locales: LocalesAPI | undefined;\r\n    private entryMetadatas: TranslationEntryMetadata[] = [];\r\n\r\n    /**\r\n     * The ContentfulService's constructor is private to prevent direct\r\n     * construction calls with the `new` operator.\r\n     */\r\n    private constructor() {}\r\n\r\n    private get space(): SpaceAPI {\r\n        if (this._space === undefined) throw new Error('SpaceAPI not initialized');\r\n        return this._space;\r\n    }\r\n\r\n    private get locales(): LocalesAPI {\r\n        if (this._locales === undefined) throw new Error('LocalesAPI not initialized');\r\n        return this._locales;\r\n    }\r\n\r\n    private async initializeEntryMetadatas() {\r\n        const contentTypes = (await this.space.getContentTypes()).items as ContentType[];\r\n\r\n        for (let contentType of contentTypes) {\r\n            const isLinkField = (field: ContentTypeField) =>\r\n                field.type === 'Link' || (field.type === 'Array' && field.items?.type === 'Link');\r\n\r\n            const isEntryLinkField = (field: ContentTypeField) =>\r\n                isLinkField(field) && (field.linkType === 'Entry' || field.items?.linkType === 'Entry');\r\n\r\n            const availableFields = contentType!.fields.filter((f) => !f.disabled && f.localized);\r\n\r\n            const linkFields = availableFields.filter((f) => isEntryLinkField(f));\r\n            const localizableFields = availableFields.filter((f) => !isLinkField(f));\r\n\r\n            const meta: TranslationEntryMetadata = {\r\n                contentType,\r\n                linkFields,\r\n                localizableFields,\r\n            };\r\n\r\n            this.entryMetadatas.push(meta);\r\n        }\r\n\r\n        console.log('Metadatada initialized!');\r\n    }\r\n\r\n    public getDefaultLocale(): LocaleInfo {\r\n        return { code: this.locales.default, name: this.locales.names[this.locales.default] };\r\n    }\r\n\r\n    public getLocales(): LocaleInfo[] {\r\n        const result = this.locales.available.map((code) => {\r\n            const name = this.locales.names[code];\r\n            return { code, name };\r\n        });\r\n        return result;\r\n    }\r\n\r\n    public static getInstance(): ContentfulService {\r\n        if (!ContentfulService._instance) {\r\n            ContentfulService._instance = new ContentfulService();\r\n        }\r\n\r\n        return ContentfulService._instance;\r\n    }\r\n\r\n    public async initialize(space: SpaceAPI, locales: LocalesAPI) {\r\n        this._space = space;\r\n        this._locales = locales;\r\n\r\n        await this.initializeEntryMetadatas();\r\n    }\r\n\r\n    public getEntry = async (entryId: string): Promise<TranslationEntry> => {\r\n        const ctEntry: any = await this.space.getEntry(entryId);\r\n        const { fields: entryFields } = ctEntry as any;\r\n\r\n        const contentTypeId = ctEntry.sys.contentType.sys.id;\r\n        const metadata = this.entryMetadatas.find((ct) => ct.contentType.sys.id === contentTypeId);\r\n        if (!metadata) throw new Error(`Unable to get metadata for content type id ${contentTypeId}`);\r\n\r\n        const spaceId = metadata.contentType.sys.space!.sys.id;\r\n\r\n        return {\r\n            id: entryId,\r\n            spaceId,\r\n            fields: entryFields,\r\n            metadata,\r\n        };\r\n    };\r\n\r\n    public updateEntry = async (\r\n        entryId: string,\r\n        targetLocale: string,\r\n        fields: Indexable<string>,\r\n        publish?: boolean\r\n    ) => {\r\n        const entry = (await this.space.getEntry(entryId)) as any;\r\n        if (!entry) {\r\n            console.error(`Unable to find entry with id=${entryId}`);\r\n            return;\r\n        }\r\n\r\n        for (const fieldId of Object.keys(fields)) {\r\n            const fieldValue = fields[fieldId];\r\n            const entryLocales = entry.fields[fieldId] as Indexable<string>;\r\n\r\n            entryLocales[targetLocale] = fieldValue;\r\n        }\r\n\r\n        await this.space.updateEntry(entry);\r\n\r\n        if (publish === true) {\r\n            await this.space.publishEntry(entryId);\r\n        }\r\n    };\r\n}\r\n","import { Card, Icon } from '@contentful/forma-36-react-components';\r\nimport { IconProps } from '@contentful/forma-36-react-components/dist/components/Icon/Icon';\r\nimport React from 'react'\r\nimport Dropzone, { FileWithPath } from 'react-dropzone'\r\nimport { styles } from '../../styles';\r\n\r\ninterface FileImportProps {\r\n    files: FileItem[],\r\n    onDrop: (acceptedFiles: FileItem[]) => void;\r\n}\r\n\r\nexport enum FileItemStatus { Dropped, InProgress, Success, Error, Abort }\r\n\r\nexport type FileItem = {\r\n    file: FileWithPath,\r\n    status: FileItemStatus\r\n}\r\n\r\nexport const FileDropzone = (props: FileImportProps) => {\r\n\r\n    const fileItemStyles = styles.dropZone.fileItem;\r\n    const fileStatusClasses: Map<FileItemStatus, string> = new Map([\r\n        [FileItemStatus.Dropped, fileItemStyles.dropped],\r\n        [FileItemStatus.InProgress, fileItemStyles.inProgress],\r\n        [FileItemStatus.Success, fileItemStyles.success],\r\n        [FileItemStatus.Error, fileItemStyles.error],\r\n        [FileItemStatus.Abort, fileItemStyles.abort],\r\n    ]);\r\n\r\n    const defIconProps: IconProps = {\r\n        style: { verticalAlign: 'middle' },\r\n        size: 'tiny',\r\n        icon: 'ArrowDownTrimmed',\r\n        color: 'muted'\r\n    };\r\n\r\n    const fileStatusIcon: Map<FileItemStatus, IconProps> = new Map([\r\n        [FileItemStatus.Dropped, { ...defIconProps, icon: 'ArrowDownTrimmed' }],\r\n        [FileItemStatus.InProgress, { ...defIconProps, icon: 'Clock' }],\r\n        [FileItemStatus.Success, { ...defIconProps, icon: 'ChevronDown', color: \"positive\" }],\r\n        [FileItemStatus.Error, { ...defIconProps, icon: 'Close', color: \"negative\" }],\r\n        [FileItemStatus.Abort, { ...defIconProps, icon: 'Close', color: \"negative\" }]\r\n    ]);\r\n\r\n    const onDrop = (files: FileWithPath[]) => {\r\n        const fileItems = files.map<FileItem>(f => ({ file: f, status: FileItemStatus.Dropped } as FileItem));\r\n        props.onDrop(fileItems);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dropzone accept=\".xlf\" onDrop={onDrop} >\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div {...getRootProps()}>\r\n                        <input {...getInputProps()} />\r\n                        <Card>\r\n                            <p>Drag 'n' drop your translation files here, or click to select files (only *.xlf files will be accepted)</p>\r\n                            {props.files.length > 0 && (\r\n                                <aside>\r\n                                    <p><b>Dropped files</b></p>\r\n                                    {props.files.map(item => (\r\n                                        <p key={item.file.name}>\r\n                                            <Icon {...fileStatusIcon.get(item.status)!} />\r\n                                            <span className={fileStatusClasses.get(item.status)}>\r\n                                                {item.file.name}\r\n                                            </span>\r\n                                        </p>\r\n                                    ))}\r\n                                </aside>)}\r\n                        </Card>\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n        </>\r\n    )\r\n}","import { DialogsAPI, OpenAlertOptions } from '@contentful/app-sdk';\r\nimport { Button, Grid, GridItem } from '@contentful/forma-36-react-components';\r\nimport React, { useState } from 'react'\r\nimport { XliffImporter } from '../../import/XliffImporter';\r\nimport { ContentfulService } from '../../services/ContentfulService';\r\nimport { FileDropzone, FileItem, FileItemStatus } from './FileDropZone';\r\n\r\ninterface FileImportProps {\r\n    dialogsApi: DialogsAPI;\r\n}\r\n\r\nexport const FileImport = (props: FileImportProps) => {\r\n\r\n    const [files, setFiles] = useState<FileItem[]>([]);\r\n    let [isBusy, setIsBusy] = useState(false);\r\n    let isFirstDrop = true;\r\n\r\n    const onDrop = (acceptedFiles: FileItem[]) => {\r\n        if (isFirstDrop) {\r\n            setFiles(acceptedFiles);\r\n            isFirstDrop = false;\r\n        }\r\n        else {\r\n            setFiles([...files, ...acceptedFiles]);\r\n        }\r\n    }\r\n\r\n    const setFileStatus = (fileIndex: number, status: FileItemStatus) => {\r\n        setFiles(prevState => {\r\n            const newState = [...prevState];\r\n            newState[fileIndex].status = status;\r\n            return (newState)\r\n        });\r\n    }\r\n\r\n    const onImportClick = () => {\r\n        setIsBusy(true);\r\n\r\n        const newFiles = [...files]\r\n        newFiles.forEach(item => item.status = FileItemStatus.InProgress);\r\n        setFiles(newFiles);\r\n\r\n        const onFilesProcessed = () => {\r\n            setIsBusy(false)\r\n            isFirstDrop = true;\r\n            const isSuccess = files.every(x => x.status === FileItemStatus.Success);\r\n\r\n            const alertProps: OpenAlertOptions = {\r\n                title: 'Import from XLIFF file(s)',\r\n                confirmLabel: 'Close',\r\n                message: isSuccess\r\n                    ? 'Files imported successfully'\r\n                    : 'Error(s) occured while importing files - see console log for details'\r\n            };\r\n\r\n            props.dialogsApi.openAlert(alertProps);\r\n        }\r\n\r\n        let filesProcessed = 0;\r\n\r\n        const onFileLoad = async (reader: FileReader, index: number) => {\r\n            const content: string = reader.result as string;\r\n\r\n            const importer = new XliffImporter(ContentfulService.getInstance(), content);\r\n            try {\r\n\r\n                await importer.execute();\r\n                setFileStatus(index, FileItemStatus.Success);\r\n            } catch (error) {\r\n                setFileStatus(index, FileItemStatus.Error);\r\n                console.error(error);\r\n            }\r\n\r\n            filesProcessed++;\r\n            if (filesProcessed === newFiles.length) {\r\n                onFilesProcessed();\r\n            }\r\n        }\r\n\r\n        const onFileError = (reader: FileReader, index: number) => {\r\n            setFileStatus(index, FileItemStatus.Error);\r\n            console.log(`file reading has failed (${files[index].file.name}, \"${reader.error}\")`);\r\n        }\r\n\r\n        for (let index = 0; index < newFiles.length; index++) {\r\n            const fileIndex = index;\r\n            const { file } = newFiles[fileIndex];\r\n\r\n            const fileReader = new FileReader();\r\n            fileReader.onload = () => onFileLoad(fileReader, fileIndex);\r\n            fileReader.onerror = () => onFileError(fileReader, fileIndex);\r\n            fileReader.onabort = () => { setFileStatus(fileIndex, FileItemStatus.Abort); }\r\n\r\n            fileReader.readAsText(file);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid columns=\"5fr 1fr\" columnGap=\"spacingXs\" rowGap=\"spacingXl\">\r\n            <GridItem >\r\n                <FileDropzone onDrop={onDrop} files={files}></FileDropzone>\r\n                { }\r\n            </GridItem>\r\n            <GridItem >\r\n                <Button\r\n                    loading={isBusy}\r\n                    disabled={isBusy || files.length === 0}\r\n                    onClick={() => onImportClick()}\r\n                    buttonType=\"positive\">\r\n                    Import\r\n                </Button>\r\n            </GridItem>\r\n        </Grid>\r\n    )\r\n}\r\n","import { documentToHtmlString } from '@contentful/rich-text-html-renderer';\r\nimport { defaultSeperator } from '../consts';\r\nimport { EntryLocalization, Indexable, IndexableAny, TranslationEntry, VisitableContext, Visitor } from '../interfaces';\r\nimport { Document as RichDocument } from '@contentful/rich-text-types';\r\n\r\nexport { }\r\n\r\nexport class ExportVisitor implements Visitor {\r\n    private _xliff: any;\r\n\r\n    public get xliff(): any { return this._xliff; }\r\n\r\n    async visitEntry(context: VisitableContext, entry: TranslationEntry): Promise<void> {\r\n        if (!this._xliff) {\r\n            this._xliff = {\r\n                resources: {},\r\n                sourceLanguage: context.sourceLocale,\r\n                targetLanguage: context.targetLocale,\r\n            };\r\n        }\r\n\r\n        const file: IndexableAny = {};\r\n        for (const { id, type, items } of entry.metadata.localizableFields) {\r\n            const fields = entry.fields as IndexableAny;\r\n            if (!fields[id] || type === 'Boolean' || type === 'Location') continue;\r\n\r\n            // https://www.contentful.com/developers/docs/concepts/data-model/#array-fields\r\n            if (type === 'Array') {\r\n                //assert(items?.type === 'Symbol');\r\n                console.log('*** Array, items type: ', items?.type);\r\n            }\r\n\r\n            const unit = {\r\n                source: this.getFieldValue(fields[id], context.sourceLocale),\r\n                target: this.getFieldValue(fields[id], context.targetLocale),\r\n            };\r\n\r\n            if (unit.source === '') continue;\r\n\r\n            file[id] = unit;\r\n        }\r\n\r\n        if (Object.keys(file).length) {\r\n            const fileId = `${entry.spaceId}:${entry.id}`;\r\n            this._xliff.resources[fileId] = file;\r\n        }\r\n    }\r\n\r\n    getFieldValue = (field: Indexable<any>, locale: string) => {\r\n\r\n        const isRichDocument = (value: any): value is RichDocument => (value as RichDocument).content !== undefined;\r\n        const isStringArray = (value: any): value is Array<string> => (value as Array<string>).map !== undefined;        const value = field[locale];\r\n\r\n        if (!value) return '';\r\n\r\n        if (isRichDocument(value)) {\r\n            return documentToHtmlString(value);\r\n        }\r\n\r\n        if (isStringArray(value)) {\r\n            return (value as Array<string>).join(defaultSeperator);\r\n        }\r\n\r\n        return value;\r\n    };\r\n\r\n    async visitEntryLocalization(context: VisitableContext, localization: EntryLocalization): Promise<void> {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n}\r\n","import { Link } from '@contentful/app-sdk';\r\nimport { IndexableAny, TranslationEntry, Visitable, VisitableContext, Visitor } from '../interfaces';\r\nimport { saveAs } from 'file-saver';\r\nimport { ContentfulAPI } from '../services/ContentfulService';\r\nimport { ExportVisitor } from './ExportVisitor';\r\n\r\nconst js2xliff = require('xliff/cjs/js2xliff');\r\n\r\nexport class XliffExporter implements Visitable {\r\n    entryId: string;\r\n    sourceLocale: string;\r\n    targetLocale: string;\r\n    includeLinkedEntries: boolean;\r\n    _rootEntry: TranslationEntry | null = null;\r\n    contentful: ContentfulAPI;\r\n\r\n    constructor(\r\n        contentful: ContentfulAPI,\r\n        entryId: string,\r\n        sourceLocale: string,\r\n        targetLocale: string,\r\n        includeLinkedEntries: boolean\r\n    ) {\r\n        this.contentful = contentful;\r\n        this.entryId = entryId;\r\n        this.sourceLocale = sourceLocale;\r\n        this.targetLocale = targetLocale;\r\n        this.includeLinkedEntries = includeLinkedEntries;\r\n    }\r\n\r\n    async accept(visitor: Visitor): Promise<void> {\r\n        const root = await this.getRoot();\r\n        const entriesToExport = this.includeLinkedEntries\r\n            ? await this.getAllEntries(root, this.sourceLocale, this.targetLocale)\r\n            : [root];\r\n        const context: VisitableContext = { sourceLocale: this.sourceLocale, targetLocale: this.targetLocale };\r\n        for (let entry of entriesToExport) {\r\n            await visitor.visitEntry(context, entry);\r\n        }\r\n    }\r\n\r\n    public async execute() {\r\n        const visitor = new ExportVisitor();\r\n        await this.accept(visitor);\r\n\r\n        if (visitor.xliff?.resources && Object.keys(visitor.xliff.resources).length) {\r\n            const root = await this.getRoot();\r\n            const content = await js2xliff(visitor.xliff);\r\n            const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });\r\n            const title = (root.fields as IndexableAny)[root.metadata.contentType.displayField][this.sourceLocale];\r\n            const spaceId = root.spaceId;\r\n            const fileName = `${this.targetLocale}_${title}_${root.id}_${spaceId}_${this.sourceLocale}.xlf`;\r\n            saveAs(blob, fileName);\r\n            console.info('Resources exported: ', Object.keys(visitor.xliff.resources).length);\r\n        } else {\r\n            console.warn('No resources was added');\r\n        }\r\n    }\r\n\r\n    private async getRoot(): Promise<TranslationEntry> {\r\n        this._rootEntry = await this.contentful.getEntry(this.entryId);\r\n        if (!this._rootEntry) throw new Error('Root entry not initialized!');\r\n        return this._rootEntry;\r\n    }\r\n\r\n    private async getAllEntries(\r\n        rootEntry: TranslationEntry,\r\n        sourceLocale: string,\r\n        targetLocale: string\r\n    ): Promise<TranslationEntry[]> {\r\n        const stack: TranslationEntry[] = [rootEntry];\r\n        const rootEntryTypeId = rootEntry.metadata.contentType.sys.id;\r\n\r\n        const pushEntry = (entry: TranslationEntry) => {\r\n            const entryTypeId = entry.metadata.contentType.sys.id;\r\n            // avoid entries and root content type duplication\r\n            if (entryTypeId !== rootEntryTypeId && stack.findIndex((x) => x.id === entry.id) < 0) {\r\n                stack.push(entry);\r\n            } else {\r\n                console.log(`Skip entry: id=${entry.id}, typeId=${entryTypeId}`);\r\n            }\r\n        };\r\n\r\n        const result: TranslationEntry[] = [];\r\n        while (stack.length) {\r\n            const entry = stack[0];\r\n\r\n            if (entry.metadata.linkFields.length) {\r\n                for (let linkMeta of entry.metadata.linkFields) {\r\n                    console.log(`Link: id=${linkMeta.id}, type=${linkMeta.type}`);\r\n\r\n                    const fieldValue = (entry.fields as IndexableAny)[linkMeta.id] as IndexableAny;\r\n\r\n                    if (!fieldValue) continue;\r\n\r\n                    try {\r\n                        const src = fieldValue[sourceLocale];\r\n                        const dest = fieldValue[targetLocale];\r\n\r\n                        if (linkMeta.type === 'Array') {\r\n                            let links = (dest ?? src) as Link[];\r\n                            for (let link of links) {\r\n                                const linkEntry = await this.contentful.getEntry(link.sys.id);\r\n                                pushEntry(linkEntry);\r\n                            }\r\n                        } else {\r\n                            let link = (dest ?? src) as Link;\r\n                            const linkEntry = await this.contentful.getEntry(link.sys.id);\r\n                            pushEntry(linkEntry);\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                        throw e;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (entry.metadata.localizableFields.length) {\r\n                result.push(entry);\r\n                console.log(\r\n                    `Entry added to result: id=${entry.id}, typeName=${entry.metadata.contentType.name},` +\r\n                        ` typeId=${entry.metadata.contentType.sys.id}`\r\n                );\r\n            }\r\n\r\n            stack.shift();\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { DialogsAPI, OpenAlertOptions } from '@contentful/app-sdk';\r\nimport { Button, Option, CheckboxField, FieldGroup, FormLabel, Grid, GridItem, Paragraph, Select } from '@contentful/forma-36-react-components';\r\nimport React, { useState } from 'react'\r\nimport { XliffExporter } from '../../export/XliffExporter';\r\nimport { ContentfulAPI, ContentfulService } from '../../services/ContentfulService';\r\nimport { useStickyState } from '../../utils';\r\n\r\nexport type FileExportHandler = (targetLocale: string, includeLinkedEntries: boolean) => void\r\n\r\ninterface FileExportProps {\r\n    entryId: string;\r\n    dialogsApi: DialogsAPI;\r\n}\r\n\r\ninterface FileExportState {\r\n    targetLocaleCode: string,\r\n    includeLinkedEntries: boolean,\r\n}\r\n\r\nexport const FileExport = (props: FileExportProps) => {\r\n    const contentful = ContentfulService.getInstance() as ContentfulAPI;\r\n    const sourceLocale = contentful.getDefaultLocale();\r\n    const targetLocales = ContentfulService.getInstance().getLocales()\r\n        .filter(loc => loc.code !== sourceLocale.code);\r\n\r\n    const [state, setState] = useStickyState<FileExportState>({\r\n        targetLocaleCode: (targetLocales.find(x => x.code === 'es-US') ?? targetLocales[0]).code,\r\n        includeLinkedEntries: true,\r\n    }, \"export-to-xliff-state\")\r\n\r\n    const [isBusy, setIsBusy] = useState(false)\r\n\r\n    const toggleLinkedEntries = (prevState?: boolean) => {\r\n        setState({ ...state, includeLinkedEntries: !prevState })\r\n    }\r\n\r\n    const onButtonClick = async () => {\r\n        let isSuccess = false;\r\n        setIsBusy(true)\r\n        try {\r\n            const exporter = new XliffExporter(contentful, props.entryId, sourceLocale.code, state.targetLocaleCode, state.includeLinkedEntries);\r\n            await exporter.execute();\r\n            isSuccess = true;\r\n        }\r\n        finally {\r\n            setIsBusy(false)\r\n        }\r\n\r\n        const alertProps: OpenAlertOptions = {\r\n            title: 'Export to XLIFF file',\r\n            confirmLabel: 'Close',\r\n            message: isSuccess\r\n                ? 'Contentful entry exported successfully'\r\n                : 'Error(s) occured while exporting files - see console log for details'\r\n        };\r\n\r\n        props.dialogsApi.openAlert(alertProps)\r\n    }\r\n\r\n    return (\r\n        <Grid columns=\"2fr 3fr 1fr\" columnGap=\"spacingXs\" rowGap=\"spacingXl\">\r\n            <GridItem >\r\n                <FieldGroup>\r\n                    <FormLabel htmlFor=\"workspaceId\">\r\n                        Source locale\r\n                        </FormLabel>\r\n                    <Paragraph> {sourceLocale.name}</Paragraph>\r\n                </FieldGroup>\r\n            </GridItem >\r\n            <GridItem >\r\n                <FieldGroup>\r\n                    <FormLabel htmlFor=\"workspaceId\" required>\r\n                        Target locale\r\n                        </FormLabel>\r\n                    <Select\r\n                        isDisabled={isBusy}\r\n                        width=\"medium\"\r\n                        value={state.targetLocaleCode}\r\n                        onChange={(event: any) => setState({ ...state, targetLocaleCode: event.currentTarget.value })}>\r\n                        {targetLocales.map(locale =>\r\n                            <Option key={locale.code} value={locale.code}>{locale.name}</Option>)\r\n                        }\r\n                    </Select>\r\n                    <CheckboxField\r\n                        disabled={isBusy}\r\n                        onChange={() => toggleLinkedEntries(state.includeLinkedEntries)}\r\n                        labelText=\"include linked entries\"\r\n                        id=\"inludeLinkedEntries\"\r\n                        name=\"inludeLinkedEntries\"\r\n                        checked={state.includeLinkedEntries}\r\n                        value='{state.includeLinkedEntries}'\r\n                        key='{state.includeLinkedEntries}'\r\n                        data-test-id={`ct-item-${state.includeLinkedEntries}`} />\r\n                </FieldGroup>\r\n            </GridItem >\r\n            <GridItem >\r\n                <Button\r\n                    loading={isBusy}\r\n                    disabled={isBusy}\r\n                    onClick={() => onButtonClick()}\r\n                    buttonType=\"positive\">\r\n                    Export\r\n                    </Button>\r\n            </GridItem>\r\n        </Grid>\r\n    )\r\n\r\n}","import { useState, useEffect } from 'react';\r\n\r\nexport function useStickyState<T>(defaultValue: T, key: any): [T, (value: T) => void] {\r\n    const [value, setValue] = useState<T>(() => {\r\n        const stickyValue = window.localStorage.getItem(key);\r\n        return (stickyValue !== null ? JSON.parse(stickyValue) : defaultValue) as T;\r\n    });\r\n    useEffect(() => {\r\n        window.localStorage.setItem(key, JSON.stringify(value));\r\n    }, [key, value]);\r\n    return [value, setValue];\r\n}\r\n","import '@contentful/forma-36-react-components/dist/styles.css';\nimport { styles } from '../styles';\nimport React, { useEffect, useState } from 'react';\nimport { Typography, Heading, Modal, Spinner } from '@contentful/forma-36-react-components';\nimport { DialogExtensionSDK } from '@contentful/app-sdk';\nimport { FileImport } from './import/FileImport';\nimport { FileExport } from './export/FileExport';\nimport { ContentfulService } from '../services/ContentfulService';\n\ninterface DialogProps {\n  sdk: DialogExtensionSDK;\n}\n\ninterface InvocationParams {\n  entryId: string;\n  entryTitle: string;\n  contentTypeId: string;\n}\n\nconst Dialog = (props: DialogProps) => {\n  const { sdk } = props;\n  const params = props.sdk.parameters.invocation as InvocationParams;\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const init = async () => {\n      // TODO: implement spiner\n      await ContentfulService.getInstance().initialize(sdk.space, sdk.locales);\n      setIsLoading(false);\n    }\n\n    init();\n  }, [sdk.locales, sdk.space])\n\n  return (\n    <Modal.Content>\n      {isLoading && (<div>Initializing contentul API...<Spinner></Spinner></div>)}\n      {!isLoading && (\n        <div className={styles.modalContent}>\n          <div>\n            <Typography>\n              <Heading className={styles.headerUnderline}>Export</Heading>\n            </Typography>\n            <FileExport\n              entryId={params.entryId}\n              dialogsApi={sdk.dialogs} />\n            <Typography>\n              <Heading className={styles.headerUnderline}>Import</Heading>\n            </Typography>\n            <FileImport dialogsApi={sdk.dialogs} />\n          </div>\n        </div>)}\n    </Modal.Content>\n  );\n};\n\nexport default Dialog;","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  AppExtensionSDK,\n  FieldExtensionSDK,\n  SidebarExtensionSDK,\n  DialogExtensionSDK,\n  EditorExtensionSDK,\n  PageExtensionSDK,\n  init,\n  locations,\n} from '@contentful/app-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport '@contentful/forma-36-tokens/dist/css/index.css';\nimport './index.css';\n\nimport Config from './components/ConfigScreen';\nimport EntryEditor from './components/EntryEditor';\nimport Page from './components/Page';\nimport Sidebar from './components/Sidebar';\nimport Field from './components/Field';\nimport Dialog from './components/Dialog';\n\nimport LocalhostWarning from './components/LocalhostWarning';\n\nif (process.env.NODE_ENV === 'development' && window.self === window.top) {\n  // You can remove this if block before deploying your app\n  const root = document.getElementById('root');\n  render(<LocalhostWarning />, root);\n} else {\n  init((sdk) => {\n    const root = document.getElementById('root');\n\n    // All possible locations for your app\n    // Feel free to remove unused locations\n    // Dont forget to delete the file too :)\n    const ComponentLocationSettings = [\n      {\n        location: locations.LOCATION_APP_CONFIG,\n        component: <Config sdk={sdk as AppExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_FIELD,\n        component: <Field sdk={sdk as FieldExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_EDITOR,\n        component: <EntryEditor sdk={sdk as EditorExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_DIALOG,\n        component: <Dialog sdk={sdk as DialogExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_SIDEBAR,\n        component: <Sidebar sdk={sdk as SidebarExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_PAGE,\n        component: <Page sdk={sdk as PageExtensionSDK} />,\n      },\n    ];\n\n    // Select a component depending on a location in which the app is rendered.\n    ComponentLocationSettings.forEach((componentLocationSetting) => {\n      if (sdk.location.is(componentLocationSetting.location)) {\n        render(componentLocationSetting.component, root);\n      }\n    });\n  });\n}\n"],"sourceRoot":""}