{"version":3,"sources":["components/ConfigScreen.tsx","components/EntryEditor.tsx","components/Page.tsx","components/Sidebar.tsx","components/Field.tsx","styles.ts","ContentfulService.ts","XliffExporter.ts","components/Dialog.tsx","utils.ts","index.tsx"],"names":["Config","props","onConfigure","a","sdk","app","getCurrentState","currentState","parameters","state","targetState","this","getParameters","setState","setReady","className","css","margin","Component","Entry","Page","Sidebar","locales","useEffect","window","startAutoResizer","stopAutoResizer","type","onClick","entryTitle","entry","fields","contentType","displayField","getValue","default","dialogs","openCurrentApp","allowHeightOverflow","position","shouldCloseOnOverlayClick","shouldCloseOnEscapePress","title","entryId","getSys","id","contentTypeId","sys","width","minHeight","exportToXliff","Field","styles","modalContainer","height","modalContent","headerUnderline","borderBottom","ContentfulService","space","entryMetadatas","initPromise","ensureInitialized","getEntry","ctEntry","entryFields","metadata","find","ct","spaceId","initializeEntryMetadatas","getContentTypes","contentTypes","items","isLinkField","field","availableFields","filter","f","disabled","localized","meta","linkFields","linkType","isEntryLinkField","localizableFields","push","e","console","log","js2xliff","require","XliffExporter","contentful","exportToFile","sourceLocale","targetLocale","includeLinkedEntries","getFieldValue","locale","value","documentToHtmlString","rootEntry","getAllEntries","entriesToExport","xliff","resources","sourceLanguage","targetLanguage","file","unit","source","target","Object","keys","length","fileId","content","blob","Blob","fileName","saveAs","Create","pushEntry","stack","findIndex","x","result","JSON","stringify","linkMeta","fieldValue","src","dest","links","link","linkEntry","error","shift","Dialog","params","invocation","targetLocales","available","map","code","name","names","sort","b","exporter","defaultValue","key","useState","stickyValue","localStorage","getItem","parse","setValue","setItem","useStickyState","isBusy","busyMessage","onExportClick","Content","justifyContent","alignItems","marginBottom","htmlFor","required","isDisabled","onChange","event","currentTarget","prevState","labelText","checked","data-test-id","buttonType","init","root","document","getElementById","location","locations","LOCATION_APP_CONFIG","component","LOCATION_ENTRY_FIELD","LOCATION_ENTRY_EDITOR","EntryEditor","LOCATION_DIALOG","LOCATION_ENTRY_SIDEBAR","LOCATION_PAGE","forEach","componentLocationSetting","is","render"],"mappings":"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","file":"static/js/main.12285e23.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AppExtensionSDK } from '@contentful/app-sdk';\nimport { Heading, Form, Workbench, Paragraph } from '@contentful/forma-36-react-components';\nimport { css } from 'emotion';\n\nexport interface AppInstallationParameters {}\n\ninterface ConfigProps {\n  sdk: AppExtensionSDK;\n}\n\ninterface ConfigState {\n  parameters: AppInstallationParameters;\n}\n\nexport default class Config extends Component<ConfigProps, ConfigState> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = { parameters: {} };\n\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    props.sdk.app.onConfigure(() => this.onConfigure());\n  }\n\n  async componentDidMount() {\n    // Get current parameters of the app.\n    // If the app is not installed yet, `parameters` will be `null`.\n    const parameters: AppInstallationParameters | null = await this.props.sdk.app.getParameters();\n\n    this.setState(parameters ? { parameters } : this.state, () => {\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      this.props.sdk.app.setReady();\n    });\n  }\n\n  onConfigure = async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await this.props.sdk.app.getCurrentState();\n\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: this.state.parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState,\n    };\n  };\n\n  render() {\n    return (\n      <Workbench className={css({ margin: '80px' })}>\n        <Form>\n          <Heading>App Config</Heading>\n          <Paragraph>Welcome to your contentful app. This is your config page.</Paragraph>\n        </Form>\n      </Workbench>\n    );\n  }\n}\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { EditorExtensionSDK } from '@contentful/app-sdk';\n\ninterface EditorProps {\n  sdk: EditorExtensionSDK;\n}\n\nconst Entry = (props: EditorProps) => {\n  return <Paragraph>Hello Entry Editor Component</Paragraph>;\n};\n\nexport default Entry;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { PageExtensionSDK } from '@contentful/app-sdk';\n\ninterface PageProps {\n  sdk: PageExtensionSDK;\n}\n\nconst Page = (props: PageProps) => {\n  return <Paragraph>Hello Page Component</Paragraph>;\n};\n\nexport default Page;\n","import React, { useEffect } from 'react';\nimport { Button } from '@contentful/forma-36-react-components';\nimport { SidebarExtensionSDK } from '@contentful/app-sdk';\n\ninterface SidebarProps {\n  sdk: SidebarExtensionSDK;\n}\n\n\nconst Sidebar = (props: SidebarProps) => {\n  const { sdk } = props;\n  //const [contentTypes] = Promise.all(sdk.space.getContentTypes())\n  const { locales } = sdk;\n  //const contentTypes = (props.sdk.space.getContentTypes()).map(x => x.items)\n\n  useEffect(() => {\n    sdk.window.startAutoResizer();\n    return () => {\n      sdk.window.stopAutoResizer();\n    };\n  }, [sdk.window]);\n\n  const exportToXliff = () => {\n    const entryTitle = sdk.entry.fields[sdk.contentType.displayField].getValue(locales.default);\n    const title = `XLIFF import/export`\n\n    sdk.dialogs.openCurrentApp({\n      allowHeightOverflow: true,\n      position: \"center\",\n      shouldCloseOnOverlayClick: true,\n      shouldCloseOnEscapePress: true,\n      title,\n      parameters: {\n        //...sdk.parameters.installation,\n        entryId: sdk.entry.getSys().id,\n        entryTitle,\n        contentTypeId: sdk.contentType.sys.id\n      },\n      width: \"large\",\n      minHeight: 350,\n    })\n  }\n\n  return (\n    <>\n      <Button type=\"button\" onClick={() => exportToXliff()}>XLIFF import/export</Button>\n    </>)\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { FieldExtensionSDK } from '@contentful/app-sdk';\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK;\n}\n\nconst Field = (props: FieldProps) => {\n  // If you only want to extend Contentful's default editing experience\n  // reuse Contentful's editor components\n  // -> https://www.contentful.com/developers/docs/extensibility/field-editors/\n  return <Paragraph>Hello Entry Field Component</Paragraph>;\n};\n\nexport default Field;\n","import { css } from \"emotion\";\r\n\r\nexport const styles = {\r\n  modalContainer: css({\r\n    height: \"360px\",\r\n  }),\r\n  modalContent: css({\r\n    //display: 'flex'\r\n  }),\r\n  headerUnderline: css({\r\n    borderBottom: \"1px solid rgb(195, 207, 213)\",\r\n  }),\r\n};\r\n","import {\r\n  SpaceAPI,\r\n  LocalesAPI,\r\n  ContentType,\r\n  ContentTypeField,\r\n} from \"@contentful/app-sdk\";\r\nimport { TranslationEntry, TranslationEntryMetadata } from \"./interfaces\";\r\n\r\nexport {};\r\nexport class ContentfulService {\r\n  protected space: SpaceAPI;\r\n  protected locales: LocalesAPI;\r\n  //protected contentTypes: ContentType[] = [];\r\n  private entryMetadatas: TranslationEntryMetadata[] = [];\r\n  initPromise: Promise<void>;\r\n\r\n  protected constructor(space: SpaceAPI, locales: LocalesAPI) {\r\n    this.space = space;\r\n    this.locales = locales;\r\n    this.initPromise = this.initializeEntryMetadatas();\r\n  }\r\n\r\n  private async initializeEntryMetadatas() {\r\n    const contentTypes = (await this.space.getContentTypes())\r\n      .items as ContentType[];\r\n\r\n    for (let contentType of contentTypes) {\r\n      const isLinkField = (field: ContentTypeField) =>\r\n        field.type === \"Link\" ||\r\n        (field.type === \"Array\" && field.items?.type === \"Link\");\r\n\r\n      const isEntryLinkField = (field: ContentTypeField) =>\r\n        isLinkField(field) &&\r\n        (field.linkType === \"Entry\" || field.items?.linkType === \"Entry\");\r\n\r\n      const availableFields = contentType!.fields.filter(\r\n        (f) => !f.disabled && f.localized\r\n      );\r\n\r\n      const linkFields = availableFields.filter((f) => isEntryLinkField(f));\r\n      const localizableFields = availableFields.filter((f) => !isLinkField(f));\r\n\r\n      const meta: TranslationEntryMetadata = {\r\n        contentType,\r\n        linkFields,\r\n        localizableFields,\r\n      };\r\n\r\n      this.entryMetadatas.push(meta);\r\n    }\r\n\r\n    console.log(\"Metadatada initialized!\");\r\n  }\r\n\r\n  private ensureInitialized = async () => await this.initPromise;\r\n\r\n  public getEntry = async (entryId: string) => {\r\n    await this.ensureInitialized();\r\n\r\n    const ctEntry: any = await this.space.getEntry(entryId);\r\n    const { fields: entryFields } = ctEntry as any;\r\n\r\n    const metadata = this.entryMetadatas.find(\r\n      (ct) => ct.contentType.sys.id === ctEntry.sys.contentType.sys.id\r\n    );\r\n    const spaceId = metadata!.contentType.sys.space?.sys.id;\r\n    return {\r\n      id: entryId,\r\n      spaceId,\r\n      fields: entryFields,\r\n      metadata,\r\n    } as TranslationEntry;\r\n  };\r\n\r\n  public static Create(\r\n    space: SpaceAPI,\r\n    locales: LocalesAPI\r\n  ): ContentfulService {\r\n    return new ContentfulService(space, locales);\r\n  }\r\n}\r\n","import { SpaceAPI, LocalesAPI, Link } from \"@contentful/app-sdk\";\r\nimport { documentToHtmlString } from \"@contentful/rich-text-html-renderer\";\r\nimport { Indexable, TranslationEntry } from \"./interfaces\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { ContentfulService } from \"./ContentfulService\";\r\n\r\nconst js2xliff = require(\"xliff/cjs/js2xliff\");\r\n\r\nexport class XliffExporter {\r\n  contentful: ContentfulService;\r\n  private async getAllEntries(\r\n    rootEntry: TranslationEntry,\r\n    sourceLocale: string,\r\n    targetLocale: string\r\n  ): Promise<TranslationEntry[]> {\r\n    const stack: TranslationEntry[] = [];\r\n    const pushEntry = (entry: TranslationEntry) => {\r\n      // avoid entries duplication\r\n      if (stack.findIndex((x) => x.id === entry.id) < 0) {\r\n        stack.push(entry);\r\n      }\r\n    };\r\n\r\n    const result: TranslationEntry[] = [];\r\n\r\n    stack.push(rootEntry);\r\n    while (stack.length) {\r\n      const entry = stack[0];\r\n      console.log(\r\n        \"Entry id: \" +\r\n          entry.id +\r\n          \", Type: \" +\r\n          entry.metadata.contentType.sys.id +\r\n          \", Fields: \" +\r\n          JSON.stringify(entry.fields)\r\n      );\r\n\r\n      if (entry.metadata.linkFields.length) {\r\n        for (let linkMeta of entry.metadata.linkFields) {\r\n          console.log(\"Link id: \" + linkMeta.id);\r\n\r\n          const fieldValue = (entry.fields as Indexable)[\r\n            linkMeta.id\r\n          ] as Indexable;\r\n\r\n          if (!fieldValue) continue;\r\n\r\n          try {\r\n            const src = fieldValue[sourceLocale];\r\n            const dest = fieldValue[targetLocale];\r\n            console.log(\r\n              `${sourceLocale}: ${JSON.stringify(\r\n                src\r\n              )}, ${targetLocale}: ${JSON.stringify(dest)}`\r\n            );\r\n\r\n            if (linkMeta.type === \"Array\") {\r\n              let links = (dest ?? src) as Link[];\r\n              for (let link of links) {\r\n                const linkEntry = await this.contentful.getEntry(link.sys.id);\r\n                pushEntry(linkEntry);\r\n              }\r\n            } else {\r\n              let link = (dest ?? src) as Link;\r\n              const linkEntry = await this.contentful.getEntry(link.sys.id);\r\n              pushEntry(linkEntry);\r\n            }\r\n          } catch (e) {\r\n            console.error(e);\r\n            throw e;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (entry.metadata.localizableFields.length) {\r\n        result.push(entry);\r\n      }\r\n\r\n      stack.shift();\r\n    }\r\n\r\n    return result;\r\n  }\r\n \r\n  private constructor(space: SpaceAPI, locales: LocalesAPI) {\r\n    this.contentful = ContentfulService.Create(space, locales)\r\n  }\r\n\r\n  public exportToFile = async (\r\n    entryId: string,\r\n    sourceLocale: string,\r\n    targetLocale: string,\r\n    includeLinkedEntries: boolean\r\n  ) => {\r\n    const getFieldValue = (field: Indexable, locale: string) => {\r\n      if (!field[locale]) return \"\";\r\n\r\n      const value = field[locale];\r\n      return typeof value === \"object\" ? documentToHtmlString(value) : value;\r\n    };\r\n\r\n    const rootEntry = await this.contentful.getEntry(entryId);\r\n    const entriesToExport = includeLinkedEntries\r\n      ? await this.getAllEntries(rootEntry, sourceLocale, targetLocale)\r\n      : [rootEntry];\r\n\r\n    let xliff: any = {\r\n      resources: {},\r\n      sourceLanguage: sourceLocale,\r\n      targetLanguage: targetLocale,\r\n    };\r\n\r\n    for (let entry of entriesToExport) {\r\n      const file: Indexable = {};\r\n      for (const { id, type } of entry.metadata.localizableFields) {\r\n        const fields = entry.fields as Indexable;\r\n        if (type === \"Boolean\" || !fields[id]) continue;\r\n\r\n        const unit = {\r\n          source: getFieldValue(fields[id], sourceLocale),\r\n          target: getFieldValue(fields[id], targetLocale),\r\n        };\r\n\r\n        if (unit.source === \"\") continue;\r\n\r\n        file[id] = unit;\r\n      }\r\n\r\n      if (Object.keys(file).length) {\r\n        const spaceId = entry.spaceId;\r\n        const fileId = `${spaceId}:${entry.id}`;\r\n        xliff.resources[fileId] = file;\r\n      }\r\n    }\r\n\r\n    if (Object.keys(xliff.resources).length) {\r\n      const content = await js2xliff(xliff);\r\n      const blob = new Blob([content], { type: \"text/plain;charset=utf-8\" });\r\n      const title = (rootEntry.fields as Indexable)[\r\n        rootEntry.metadata.contentType.displayField\r\n      ][sourceLocale];\r\n      const spaceId = rootEntry.spaceId;\r\n      const fileName = `${targetLocale}_${title}_${rootEntry.id}_${spaceId}_${sourceLocale}.xlf`;\r\n      saveAs(blob, fileName);\r\n    }\r\n  };\r\n\r\n  public static Create(\r\n    space: SpaceAPI,\r\n    locales: LocalesAPI\r\n  ): XliffExporter {\r\n    return new XliffExporter(space, locales);\r\n  }\r\n}\r\n","import { styles } from '../styles';\nimport React from 'react';\nimport { Typography, Heading, Modal, Button, Select, Option, FormLabel, Paragraph, CheckboxField, FieldGroup, Flex, TextInput, Spinner } from '@contentful/forma-36-react-components';\nimport { DialogExtensionSDK } from '@contentful/app-sdk';\nimport { useStickyState } from '../utils';\nimport { XliffExporter } from '../XliffExporter';\n\ninterface DialogProps {\n  sdk: DialogExtensionSDK;\n}\n\ninterface InvocationParams {\n  entryId: string;\n  entryTitle: string;\n  contentTypeId: string;\n}\n\ninterface DialogState {\n  targetLocale: string,\n  includeLinkedEntries: boolean,\n  isBusy: boolean,\n  busyMessage: string;\n}\n\nconst Dialog = (props: DialogProps) => {\n\n  const { sdk } = props;\n  const { locales } = sdk;\n  const sourceLocale = locales.default;\n\n  const params = props.sdk.parameters.invocation as InvocationParams;\n\n  const targetLocales = locales.available\n    .filter(locale => locale !== sourceLocale)\n    .map(code => {\n      const name = locales.names[code];\n      return { code, name }\n    })\n    .sort((a, b) => (a.name > b.name) ? 1 : -1);\n  const exporter = XliffExporter.Create(sdk.space, sdk.locales);\n\n\n  const [state, setState] = useStickyState<DialogState>({\n    targetLocale: targetLocales[0].code,\n    includeLinkedEntries: true,\n    isBusy: false,\n    busyMessage: ''\n  }, \"export-xliff-dialog\")\n\n  const onExportClick = async () => {\n    setState({ ...state, isBusy: true, busyMessage: 'Exporting entries...' })\n    try {\n      await exporter.exportToFile(params.entryId, locales.default, state.targetLocale, state.includeLinkedEntries);\n    }\n    finally {\n      setState({ ...state, isBusy: false, busyMessage: '' })\n    }\n  }\n\n  const toggleLinkedEntries = (prevState?: boolean) => {\n    setState({ ...state, includeLinkedEntries: !prevState })\n  }\n\n  return (\n    <>\n      {/* <Modal.Header title=\"Export translations to XLIFF\" /> */}\n      <Modal.Content>\n        <div className={styles.modalContent}>\n          <div>\n\n            <Typography>\n              <Heading className={styles.headerUnderline}>Export</Heading>\n            </Typography>\n            <Flex\n              justifyContent=\"space-between\"\n              alignItems=\"cener\"\n              marginBottom=\"spacingM\"\n            >\n              <Flex><Paragraph><b>Source locale:</b> {sourceLocale}</Paragraph></Flex>\n              <Flex>\n                <FieldGroup>\n                  <FormLabel htmlFor=\"workspaceId\" required>\n                    Target locale\n                      </FormLabel>\n                  <Select\n                    isDisabled={state.isBusy}\n                    width=\"medium\"\n                    value={`${state.targetLocale}`}\n                    onChange={(event: any) => setState({ ...state, targetLocale: event.currentTarget.value })}>\n                    {targetLocales.map(locale => <Option key={locale.code} value={locale.code}>{locale.name}</Option>)}\n                  </Select>\n                  <CheckboxField\n                    onChange={() => toggleLinkedEntries(state.includeLinkedEntries)}\n                    labelText=\"include linked entries\"\n                    id=\"inludeLinkedEntries\"\n                    name=\"inludeLinkedEntries\"\n                    checked={state.includeLinkedEntries}\n                    value='{state.includeLinkedEntries}'\n                    key='{state.includeLinkedEntries}'\n                    data-test-id={`ct-item-${state.includeLinkedEntries}`} />\n                </FieldGroup>\n              </Flex>\n              <Flex><Button onClick={() => onExportClick()} buttonType=\"positive\">\n                Export\n          </Button></Flex>\n            </Flex>\n            {state.isBusy && (<div>{state.busyMessage} <Spinner /></div>)}\n\n            <Typography>\n              <Heading className={styles.headerUnderline}>Import</Heading>\n              <Paragraph>Import...</Paragraph>\n            </Typography>\n            <TextInput\n              name=\"example\"\n              type=\"text\"\n              value=\"Forma 36\"\n              className=\"f36-margin-bottom--m\"\n            />\n          </div>\n        </div>\n      </Modal.Content>\n    </>\n  );\n};\n\nexport default Dialog;\n","import {useState, useEffect} from \"react\";\r\n\r\nexport function useStickyState<T>(defaultValue: T, key: any) : [T, (value: T) => void] {\r\n  const [value, setValue] = useState<T>(() => {\r\n    const stickyValue = window.localStorage.getItem(key);\r\n    return (stickyValue !== null ? JSON.parse(stickyValue) : defaultValue) as T;\r\n  });\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n  }, [key, value]);\r\n  return [value, setValue];\r\n}\r\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  AppExtensionSDK,\n  FieldExtensionSDK,\n  SidebarExtensionSDK,\n  DialogExtensionSDK,\n  EditorExtensionSDK,\n  PageExtensionSDK,\n  init,\n  locations,\n} from '@contentful/app-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport '@contentful/forma-36-tokens/dist/css/index.css';\nimport './index.css';\n\nimport Config from './components/ConfigScreen';\nimport EntryEditor from './components/EntryEditor';\nimport Page from './components/Page';\nimport Sidebar from './components/Sidebar';\nimport Field from './components/Field';\nimport Dialog from './components/Dialog';\n\nimport LocalhostWarning from './components/LocalhostWarning';\n\nif (process.env.NODE_ENV === 'development' && window.self === window.top) {\n  // You can remove this if block before deploying your app\n  const root = document.getElementById('root');\n  render(<LocalhostWarning />, root);\n} else {\n  init((sdk) => {\n    const root = document.getElementById('root');\n\n    // All possible locations for your app\n    // Feel free to remove unused locations\n    // Dont forget to delete the file too :)\n    const ComponentLocationSettings = [\n      {\n        location: locations.LOCATION_APP_CONFIG,\n        component: <Config sdk={sdk as AppExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_FIELD,\n        component: <Field sdk={sdk as FieldExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_EDITOR,\n        component: <EntryEditor sdk={sdk as EditorExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_DIALOG,\n        component: <Dialog sdk={sdk as DialogExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_SIDEBAR,\n        component: <Sidebar sdk={sdk as SidebarExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_PAGE,\n        component: <Page sdk={sdk as PageExtensionSDK} />,\n      },\n    ];\n\n    // Select a component depending on a location in which the app is rendered.\n    ComponentLocationSettings.forEach((componentLocationSetting) => {\n      if (sdk.location.is(componentLocationSetting.location)) {\n        render(componentLocationSetting.component, root);\n      }\n    });\n  });\n}\n"],"sourceRoot":""}